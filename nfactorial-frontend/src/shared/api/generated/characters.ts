/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Rick and Morty API
 * The Rick and Morty API documentation
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  CharacterControllerGetAll200,
  CharacterControllerGetAllParams,
  CharacterControllerGetCharacter200,
  Error
} from './model';

import { apiInstance } from '../instance';



  
  
  
/**
 * Retrieve characters with optional filtering
 * @summary Get all characters
 */
export const characterControllerGetAll = (
    params?: CharacterControllerGetAllParams,
 ) => {
    return apiInstance<CharacterControllerGetAll200>(
    {url: `/character`, method: 'GET',
        params
    },
    );
  }



export const getCharacterControllerGetAllKey = (params?: CharacterControllerGetAllParams,) => [`/character`, ...(params ? [params]: [])] as const;

export type CharacterControllerGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof characterControllerGetAll>>>
export type CharacterControllerGetAllQueryError = void

/**
 * @summary Get all characters
 */
export const useCharacterControllerGetAll = <TError = void>(
  params?: CharacterControllerGetAllParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof characterControllerGetAll>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCharacterControllerGetAllKey(params) : null);
  const swrFn = () => characterControllerGetAll(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Retrieve a single character by ID or multiple characters with comma-separated IDs (e.g., "1,2,3")
 * @summary Get character by ID
 */
export const characterControllerGetCharacter = (
    id: string,
 ) => {
    return apiInstance<CharacterControllerGetCharacter200>(
    {url: `/character/${id}`, method: 'GET'
    },
    );
  }



export const getCharacterControllerGetCharacterKey = (id: string,) => [`/character/${id}`] as const;

export type CharacterControllerGetCharacterQueryResult = NonNullable<Awaited<ReturnType<typeof characterControllerGetCharacter>>>
export type CharacterControllerGetCharacterQueryError = Error

/**
 * @summary Get character by ID
 */
export const useCharacterControllerGetCharacter = <TError = Error>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof characterControllerGetCharacter>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCharacterControllerGetCharacterKey(id) : null);
  const swrFn = () => characterControllerGetCharacter(id)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
