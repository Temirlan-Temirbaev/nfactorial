/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Rick and Morty API
 * The Rick and Morty API documentation
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  LocationControllerGetAll200,
  LocationControllerGetAllParams,
  LocationControllerGetLocation200
} from './model';

import { apiInstance } from '../instance';



  
  
  
/**
 * Retrieve locations with optional filtering
 * @summary Get all locations
 */
export const locationControllerGetAll = (
    params?: LocationControllerGetAllParams,
 ) => {
    return apiInstance<LocationControllerGetAll200>(
    {url: `/location`, method: 'GET',
        params
    },
    );
  }



export const getLocationControllerGetAllKey = (params?: LocationControllerGetAllParams,) => [`/location`, ...(params ? [params]: [])] as const;

export type LocationControllerGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof locationControllerGetAll>>>
export type LocationControllerGetAllQueryError = void

/**
 * @summary Get all locations
 */
export const useLocationControllerGetAll = <TError = void>(
  params?: LocationControllerGetAllParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof locationControllerGetAll>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLocationControllerGetAllKey(params) : null);
  const swrFn = () => locationControllerGetAll(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Retrieve a single location by ID or multiple locations with comma-separated IDs (e.g., "1,2,3")
 * @summary Get location by ID
 */
export const locationControllerGetLocation = (
    id: string,
 ) => {
    return apiInstance<LocationControllerGetLocation200>(
    {url: `/location/${id}`, method: 'GET'
    },
    );
  }



export const getLocationControllerGetLocationKey = (id: string,) => [`/location/${id}`] as const;

export type LocationControllerGetLocationQueryResult = NonNullable<Awaited<ReturnType<typeof locationControllerGetLocation>>>
export type LocationControllerGetLocationQueryError = void

/**
 * @summary Get location by ID
 */
export const useLocationControllerGetLocation = <TError = void>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof locationControllerGetLocation>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLocationControllerGetLocationKey(id) : null);
  const swrFn = () => locationControllerGetLocation(id)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
